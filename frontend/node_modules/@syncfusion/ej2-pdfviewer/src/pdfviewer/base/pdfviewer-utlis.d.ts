import { PdfFontStyle, PdfTrueTypeFont } from '@syncfusion/ej2-pdf';
/**
 *
 * @hidden
 */
export declare class PdfViewerUtils {
    /**
     * It returns a boolean value.
     *
     * @param {string} text - It get the fontcollection.
     * @param {PdfTrueTypeFont} font - Get the font.
     * @private
     * @returns {boolean} - Return the boolean.
     */
    static isSupportedFont(text: string, font: PdfTrueTypeFont): boolean;
    /**
     * It convert byte array to base64 string.
     *
     * @param {any} fontStream - It get the byte array.
     * @private
     * @returns {any} - Return the base64 string.
     */
    static processFontStream(fontStream: any): any;
    /**
     * @param {string} customFonts - Get the custom fonts.
     * @param {string} url - Get the url.
     * @returns {any} - It's return fontCollection
     * @private
     */
    static fetchCustomFonts(customFonts: string[], url: string): Promise<{
        [key: string]: Uint8Array;
    }>;
    /**
     * @param {any} fontCollection - Get the custom fonts collection.
     * @param {string} text - Get the font family.
     * @param {number} fontSize - Get the font size.
     * @param {PdfFontStyle} fontStyle - Get the font style.
     * @returns {any} - It's return fontCollection
     * @private
     */
    static tryGetFontFromKeys(fontCollection: {
        [key: string]: any;
    }, text: string, fontSize: number, fontStyle?: PdfFontStyle): (PdfTrueTypeFont | null);
    /**
     * @param {any} fallbackFontCollection - Get the custom fonts collection.
     * @param {string} fontFamily - Get the font family.
     * @returns {any} - It's return fontCollection
     * @private
     */
    static getFontKey(fallbackFontCollection: {
        [key: string]: any;
    }, fontFamily: string): string | undefined;
    /**
     * @param {string} color - Gets the color in hex RGBA pattern.
     * @returns {boolean} - It's return boolean
     * @private
     */
    static isHexRGBAAndTransparent(color: string): boolean;
    /**
     * @param {string} color - Gets the background color with transparency.
     * @returns {string} - It's return background color with transparency.
     * @private
     */
    static setTransparencyToHex(color: string): string;
    /**
     * @param {string} color - Gets the background color without transparency.
     * @returns {string} - It's return background color without transparency.
     * @private
     */
    static removeAlphaValueFromHex(color: string): string;
    private static fetchData;
    private static convertByteArrayToBase64;
    /**
     * @private
     * @param {number} value - It describes about the value
     * @returns {number} - number
     */
    static convertPixelToPoint(value: number): number;
}
/**
 *
 * @hidden
 */
export declare class PdfViewerSessionStorage {
    private localStorage;
    /**
     * @private
     */
    enableLocalStorage: boolean;
    /**
     * @private
     */
    documentId: string;
    constructor(enableLocalStorage: boolean);
    /**
     * Method to set an item in either session or local storage
     *
     * @param {string} key - Get the key.
     * @param {string} value - Get the value.
     * @private
     * @returns {void}
     */
    setItem(key: string, value: string): void;
    /**
     * Method to get an item from either session or local storage
     *
     * @param {string} key - Get the key.
     * @private
     * @returns {any} - It's return the value.
     */
    getItem(key: string): string | null;
    /**
     * Method to remove an item from either session or local storage
     *
     * @param {string} key - Get the key.
     * @private
     * @returns {void}
     */
    removeItem(key: string): void;
    /**
     * Method to return the length of the storage
     *
     * @private
     * @returns {number} - return the length of the session.
     */
    getSessionLength(): number;
    /**
     * Method to return the key at the specified index
     *
     * @param {number} index - Get the index.
     * @private
     * @returns {any} - It's return the key value.
     */
    getKey(index: number): string | null;
    /**
     * Method to return the window session storage size.
     *
     * @private
     * @returns {any} - It's return the key value.
     */
    getWindowSessionStorageSize(): any;
    /**
     * Method to move all items from sessionStorage to localStorage
     *
     * @param {boolean} enableLocalStorage - Get the enableLocalStorage value.
     * @private
     * @returns {void}
     */
    migrateToLocalStorage(enableLocalStorage: boolean): void;
    /**
     * Method to clear all viewer items from sessionStorage and localStorage.
     *
     * @private
     * @returns {void}
     */
    clear(): void;
    private getRemovingItems;
}
