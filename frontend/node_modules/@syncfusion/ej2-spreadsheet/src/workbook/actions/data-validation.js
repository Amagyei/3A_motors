import { getSheet, getColumn, isHiddenRow, getCell, setCell, getSheetIndex, getSheetNameFromAddress, checkColumnValidation } from '../base/index';
import { cellValidation, applyCellFormat, isValidation, addHighlight, getCellAddress, validationHighlight, getSwapRange } from '../common/index';
import { removeHighlight, checkIsFormula, getSheetIndexFromAddress, getSplittedAddressForColumn } from '../common/index';
import { getRangeIndexes, getUpdatedFormulaOnInsertDelete, getUpdatedFormula, getRangeFromAddress, getViewportIndexes } from '../common/index';
import { updateCell, beforeInsert, beforeDelete, addListValidationDropdown } from '../common/index';
import { getSheetIndexFromId, setColumn, refreshInsertDelete, workbookFormulaOperation } from '../index';
import { extend, isNullOrUndefined } from '@syncfusion/ej2-base';
/**
 * The `WorkbookHyperlink` module is used to handle Hyperlink action in Spreadsheet.
 */
var WorkbookDataValidation = /** @class */ (function () {
    /**
     * Constructor for WorkbookSort module.
     *
     * @param {Workbook} parent - Specifies the parent element.
     */
    function WorkbookDataValidation(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void}
     */
    WorkbookDataValidation.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookDataValidation.prototype.addEventListener = function () {
        this.parent.on(cellValidation, this.validationHandler, this);
        this.parent.on(addHighlight, this.addHighlightHandler, this);
        this.parent.on(removeHighlight, this.removeHighlightHandler, this);
        this.parent.on(beforeInsert, this.beforeInsertDeleteHandler, this);
        this.parent.on(beforeDelete, this.beforeInsertDeleteHandler, this);
        this.parent.on(refreshInsertDelete, this.beforeInsertDeleteHandler, this);
    };
    WorkbookDataValidation.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(cellValidation, this.validationHandler);
            this.parent.off(addHighlight, this.addHighlightHandler);
            this.parent.off(removeHighlight, this.removeHighlightHandler);
            this.parent.off(beforeInsert, this.beforeInsertDeleteHandler);
            this.parent.off(beforeDelete, this.beforeInsertDeleteHandler);
            this.parent.off(refreshInsertDelete, this.beforeInsertDeleteHandler);
        }
    };
    WorkbookDataValidation.prototype.validationHandler = function (args) {
        var _this = this;
        var onlyRange = args.range;
        var sheetName = '';
        var lastIndex = args.range.lastIndexOf('!');
        if (lastIndex > -1) {
            onlyRange = args.range.substring(lastIndex + 1);
            sheetName = args.range.substring(0, lastIndex);
        }
        var sheet;
        var isActiveSheet;
        if (sheetName) {
            var sheetIdx = getSheetIndex(this.parent, sheetName);
            sheet = getSheet(this.parent, sheetIdx);
            isActiveSheet = sheetIdx === this.parent.activeSheetIndex;
        }
        else {
            sheet = this.parent.getActiveSheet();
            isActiveSheet = true;
        }
        this.parent.dataValidationRange = (this.parent.dataValidationRange.indexOf('!') > -1 ? '' : sheet.name + '!') + this.parent.dataValidationRange + onlyRange + ',';
        var rangeInfo = this.getRangeWhenColumnSelected(onlyRange, sheet);
        onlyRange = rangeInfo.range;
        if (!isNullOrUndefined(sheetName)) {
            args.range = sheetName + '!' + onlyRange;
        }
        args.range = args.range || sheet.selectedRange;
        var indexes = getSwapRange(getRangeIndexes(args.range));
        var cell;
        var column;
        var viewportIndexes;
        if (args.viewport && rangeInfo.isFullCol) {
            viewportIndexes = getViewportIndexes(this.parent, args.viewport);
        }
        if (!args.isRemoveValidation && args.rules.type === 'List' && args.rules.value1) {
            args.rules.value1 = args.rules.value1.trim();
            if (args.rules.value1[args.rules.value1.length - 1] === this.parent.listSeparator) {
                args.rules.value1 = args.rules.value1.substring(0, args.rules.value1.length - 1);
            }
        }
        var activeCellIndex = getSwapRange(getRangeIndexes(sheet.activeCell));
        var isListValidation;
        var _loop_1 = function (colIdx) {
            if (rangeInfo.isFullCol) {
                column = getColumn(sheet, colIdx);
                if (args.isRemoveValidation) {
                    if (column && column.validation) {
                        if (colIdx === activeCellIndex[1]) {
                            isListValidation = column.validation.type === 'List';
                        }
                        delete column.validation;
                        if (viewportIndexes) {
                            viewportIndexes.forEach(function (viewportIndex) {
                                for (var rowIdx = viewportIndex[0]; rowIdx <= viewportIndex[2]; rowIdx++) {
                                    cell = getCell(rowIdx, colIdx, sheet);
                                    _this.parent.notify(applyCellFormat, { rowIdx: rowIdx, colIdx: colIdx, style: _this.parent.getCellStyleValue(['backgroundColor', 'color'], [rowIdx, colIdx]) });
                                }
                            });
                        }
                    }
                }
                else {
                    var newValidation = Object.assign({}, args.rules);
                    var currIdx = [0, colIdx, 0, colIdx];
                    var prevIdx = indexes; // Calculate previous indexes based on the original starting point of the formula
                    var updatedVal1 = getUpdatedFormula(currIdx, prevIdx, sheet, this_1.parent, { formula: args.rules.value1 });
                    newValidation.value1 = updatedVal1;
                    if (!isNullOrUndefined(args.rules.value2) && args.rules.value2 !== '') {
                        var updatedVal2 = getUpdatedFormula(currIdx, prevIdx, sheet, this_1.parent, { formula: args.rules.value2 });
                        newValidation.value2 = updatedVal2;
                    }
                    else if (args.rules.type === 'Custom') {
                        delete newValidation.value2;
                    }
                    column.validation = newValidation;
                    if (colIdx === activeCellIndex[1]) {
                        isListValidation = column.validation.type === 'List';
                    }
                    return "continue";
                }
            }
            for (var rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                if (args.isRemoveValidation) {
                    column = getColumn(sheet, colIdx);
                    if (column && column.validation) {
                        if (rowIdx === indexes[2]) {
                            column.validation.address = getSplittedAddressForColumn(column.validation.address, [indexes[0], colIdx, indexes[2], colIdx], colIdx);
                        }
                        this_1.parent.notify(applyCellFormat, {
                            rowIdx: rowIdx, colIdx: colIdx,
                            style: this_1.parent.getCellStyleValue(['backgroundColor', 'color'], [rowIdx, colIdx])
                        });
                    }
                    cell = getCell(rowIdx, colIdx, sheet);
                    if (cell && cell.validation) {
                        if (rowIdx === activeCellIndex[0] && colIdx === activeCellIndex[1]) {
                            isListValidation = cell.validation.type === 'List';
                        }
                        if (!updateCell(this_1.parent, sheet, { cell: { validation: {} }, rowIdx: rowIdx, colIdx: colIdx })) {
                            delete cell.validation;
                            this_1.parent.notify(applyCellFormat, {
                                rowIdx: rowIdx, colIdx: colIdx, style: this_1.parent.getCellStyleValue(['backgroundColor', 'color'], [rowIdx, colIdx])
                            });
                        }
                        else {
                            isListValidation = false;
                        }
                    }
                }
                else {
                    var newValidation = Object.assign({}, args.rules);
                    var currIdx = [rowIdx, colIdx, rowIdx, colIdx];
                    var prevIdx = indexes; // Calculate previous indexes based on the original starting point of the formula
                    var updatedVal = getUpdatedFormula(currIdx, prevIdx, sheet, this_1.parent, { formula: args.rules.value1 });
                    newValidation.value1 = updatedVal;
                    if (!isNullOrUndefined(args.rules.value2) && args.rules.value2 !== '') {
                        var updatedVal2 = getUpdatedFormula(currIdx, prevIdx, sheet, this_1.parent, { formula: args.rules.value2 });
                        newValidation.value2 = updatedVal2;
                    }
                    else if (args.rules.type === 'Custom') {
                        delete newValidation.value2;
                    }
                    cell = { validation: Object.assign({}, newValidation) };
                    updateCell(this_1.parent, sheet, { cell: cell, rowIdx: rowIdx, colIdx: colIdx });
                    if (rowIdx === activeCellIndex[0] && colIdx === activeCellIndex[1]) {
                        isListValidation = cell.validation.type === 'List';
                    }
                    if (rowIdx === indexes[2]) {
                        column = getColumn(sheet, colIdx);
                        if (column && column.validation) {
                            column.validation.address = getSplittedAddressForColumn(column.validation.address, [indexes[0], colIdx, indexes[2], colIdx], colIdx);
                        }
                    }
                }
            }
        };
        var this_1 = this;
        for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
            _loop_1(colIdx);
        }
        if (isActiveSheet && isListValidation) {
            var validation = void 0;
            var cell_1 = getCell(activeCellIndex[0], activeCellIndex[1], sheet, false, true);
            if (args.isRemoveValidation) {
                validation = {};
            }
            else {
                validation = cell_1.validation;
                if (!validation) {
                    column = getColumn(sheet, activeCellIndex[1]);
                    validation = (column && column.validation) || {};
                }
            }
            this.parent.notify(addListValidationDropdown, { validation: validation, cell: cell_1, rowIdx: activeCellIndex[0], colIdx: activeCellIndex[1], isRefresh: true });
        }
    };
    WorkbookDataValidation.prototype.addHighlightHandler = function (args) {
        this.invalidDataHandler(args.range, false, args.td, args.isclearFormat);
    };
    WorkbookDataValidation.prototype.removeHighlightHandler = function (args) {
        this.invalidDataHandler(args.range, true);
    };
    WorkbookDataValidation.prototype.getRange = function (range) {
        var indexes = getRangeIndexes(range);
        var sheet = this.parent.getActiveSheet();
        var maxColCount = sheet.colCount;
        var maxRowCount = sheet.rowCount;
        if (indexes[2] === maxRowCount - 1 && indexes[0] === 0) {
            range = range.replace(/[0-9]/g, '');
        }
        else if (indexes[3] === maxColCount - 1 && indexes[2] === 0) {
            range = range.replace(/\D/g, '');
        }
        return range;
    };
    WorkbookDataValidation.prototype.invalidDataHandler = function (range, isRemoveHighlightedData, td, isclearFormat) {
        var sheetIdx = range ? getSheetIndexFromAddress(this.parent, range) : this.parent.activeSheetIndex;
        var sheet = getSheet(this.parent, sheetIdx);
        range = range || sheet.selectedRange;
        var sheetName = range.includes('!') ? getSheetNameFromAddress(range) : sheet.name;
        var rangeInfo = this.getRangeWhenColumnSelected(getRangeFromAddress(range), sheet);
        var isFullCol = rangeInfo.isFullCol;
        range = sheetName + '!' + rangeInfo.range;
        var indexes = range ? getSwapRange(getRangeIndexes(range)) : [];
        range = this.getRange(range);
        var rowIdx = range ? indexes[0] : 0;
        var lastRowIdx = range ? indexes[2] : sheet.rows.length;
        for (rowIdx; rowIdx <= lastRowIdx; rowIdx++) {
            if (sheet && sheet.rows[rowIdx]) {
                var colIdx = range ? indexes[1] : 0;
                var lastColIdx = range ? indexes[3] : sheet.rows[rowIdx].cells.length;
                for (colIdx; colIdx <= lastColIdx; colIdx++) {
                    var validation = void 0;
                    if (sheet.rows[rowIdx].cells && sheet.rows[rowIdx].cells[colIdx]) {
                        var column = getColumn(sheet, colIdx);
                        var cell = sheet.rows[rowIdx].cells[colIdx];
                        if (cell && cell.validation) {
                            validation = cell.validation;
                            if (isclearFormat && !validation.isHighlighted) {
                                return;
                            }
                            if (isRemoveHighlightedData) {
                                if (validation.isHighlighted) {
                                    cell.validation.isHighlighted = false;
                                }
                            }
                            else {
                                cell.validation.isHighlighted = true;
                            }
                        }
                        else if (column && column.validation) {
                            validation = column.validation;
                            if (isclearFormat && !validation.isHighlighted) {
                                return;
                            }
                            if (validation.address && !checkColumnValidation(column, rowIdx, colIdx)) {
                                continue; // Skip validation for removed ranges in the column validation.
                            }
                            if (isRemoveHighlightedData && isFullCol) {
                                if (validation.isHighlighted) {
                                    column.validation.isHighlighted = false;
                                }
                            }
                            else if (isFullCol) {
                                column.validation.isHighlighted = true;
                            }
                        }
                        if (validation && this.parent.allowDataValidation) {
                            var validEventArgs = { value: cell.value ? cell.value : '', range: [rowIdx, colIdx], sheetIdx: sheetIdx, td: td, isValid: true };
                            this.parent.notify(isValidation, validEventArgs);
                            if (!validEventArgs.isValid) {
                                if (!isHiddenRow(sheet, rowIdx) && sheetIdx === this.parent.activeSheetIndex) {
                                    this.parent.notify(validationHighlight, {
                                        isRemoveHighlightedData: isRemoveHighlightedData, rowIdx: rowIdx, colIdx: colIdx, td: td
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    WorkbookDataValidation.prototype.beforeInsertDeleteHandler = function (args) {
        var _this = this;
        var isSheetAction;
        if (args.modelType === 'Sheet') {
            if (args.name !== refreshInsertDelete) {
                return;
            }
            isSheetAction = true;
        }
        else if (args.name === refreshInsertDelete) {
            return;
        }
        var isInsert = args.name === beforeInsert;
        var eventArgs;
        var endIdx;
        var curSheet;
        var prevIdx;
        if (isInsert) {
            curSheet = getSheet(this.parent, args.activeSheetIndex);
            endIdx = args.index + (args.model.length - 1);
            eventArgs = { insertDeleteArgs: { startIndex: args.index, endIndex: endIdx, modelType: args.modelType, isInsert: true,
                    sheet: curSheet }, sheetIdx: args.activeSheetIndex };
            prevIdx = args.index - 1;
        }
        else if (isSheetAction) {
            var sheetNames = [];
            var sheetId = void 0;
            var formulaArgs = {
                action: 'getSheetInfo', sheetInfo: []
            };
            this.parent.notify(workbookFormulaOperation, formulaArgs);
            for (var idx = args.startIndex; idx <= args.endIndex; idx++) {
                sheetId = this.parent.sheets[idx].id;
                for (var i = 0; i < formulaArgs.sheetInfo.length; i++) {
                    if (formulaArgs.sheetInfo[i].index === sheetId) {
                        sheetNames.push(formulaArgs.sheetInfo[i].sheet);
                        break;
                    }
                }
            }
            eventArgs = { sheetNames: sheetNames };
        }
        else {
            curSheet = args.model;
            eventArgs = { insertDeleteArgs: { startIndex: args.start, modelType: args.modelType,
                    endIndex: args.end, sheet: curSheet }, sheetIdx: getSheetIndexFromId(this.parent, curSheet.id) };
        }
        var updateFormula = function (validation) {
            if (checkIsFormula(validation.value1) && (!eventArgs.otherSheet || validation.value1.includes(curSheet.name))) {
                eventArgs.cell = { formula: validation.value1 };
                _this.parent.notify(getUpdatedFormulaOnInsertDelete, eventArgs);
                validation.value1 = eventArgs.cell.formula;
            }
            if (checkIsFormula(validation.value2) && (!eventArgs.otherSheet || validation.value2.includes(curSheet.name))) {
                eventArgs.cell = { formula: validation.value2 };
                _this.parent.notify(getUpdatedFormulaOnInsertDelete, eventArgs);
                validation.value2 = eventArgs.cell.formula;
            }
        };
        var isColAction = args.modelType === 'Column';
        var updateValidationToInsertedModel = function (validation, isColUpdate) {
            if (validation) {
                eventArgs.insertDeleteArgs.forceUpdate = true;
                for (var insertIdx = args.index; insertIdx <= endIdx; insertIdx++) {
                    validation = extend({}, validation);
                    updateFormula(validation);
                    if (isColUpdate) {
                        setColumn(curSheet, insertIdx, { validation: validation });
                    }
                    else if (isColAction) {
                        setCell(rowIdx, insertIdx, curSheet, { validation: validation }, true);
                    }
                    else {
                        setCell(insertIdx, colIdx, curSheet, { validation: validation }, true);
                    }
                }
                delete eventArgs.insertDeleteArgs.forceUpdate;
            }
        };
        var cell;
        var column;
        var endRowCount;
        var endColCount;
        var rowIdx;
        var colIdx;
        var isInsertOnCurSheet;
        this.parent.sheets.forEach(function (sheet, sheetIdx) {
            if (isSheetAction) {
                if (sheetIdx >= args.startIndex && sheetIdx <= args.endIndex) {
                    return;
                }
            }
            else {
                if (sheetIdx === eventArgs.sheetIdx) {
                    isInsertOnCurSheet = isInsert;
                    delete eventArgs.otherSheet;
                    delete eventArgs.formulaSheet;
                }
                else {
                    eventArgs.otherSheet = true;
                    eventArgs.formulaSheet = sheet;
                    isInsertOnCurSheet = false;
                }
            }
            endRowCount = sheet.usedRange.rowIndex + 1;
            for (colIdx = 0, endColCount = sheet.usedRange.colIndex + 1; colIdx < endColCount; colIdx++) {
                if (isInsertOnCurSheet && isColAction && colIdx >= args.index && colIdx <= endIdx) {
                    continue;
                }
                column = sheet.columns && sheet.columns[colIdx];
                if (column && column.validation) {
                    updateFormula(column.validation);
                    if (isInsertOnCurSheet && isColAction && prevIdx === colIdx) {
                        updateValidationToInsertedModel(column.validation, true);
                    }
                }
                for (rowIdx = 0; rowIdx < endRowCount; rowIdx++) {
                    cell = getCell(rowIdx, colIdx, sheet, false, true);
                    if (cell.validation && (!isInsertOnCurSheet || isColAction || rowIdx < args.index || rowIdx > endIdx)) {
                        updateFormula(cell.validation);
                        if (isInsertOnCurSheet && prevIdx === (isColAction ? colIdx : rowIdx)) {
                            updateValidationToInsertedModel(cell.validation);
                        }
                    }
                }
            }
        });
    };
    WorkbookDataValidation.prototype.getRangeWhenColumnSelected = function (range, sheet) {
        var isFullCol;
        var colNames = range.split(':');
        if (range.match(/\D/g) && !range.match(/[0-9]/g)) {
            colNames[0] += 1;
            colNames[1] += sheet.rowCount;
            range = colNames[0] + ':' + colNames[1];
            isFullCol = true;
        }
        else if (!range.match(/\D/g) && range.match(/[0-9]/g)) {
            colNames[0] = 'A' + colNames[0];
            colNames[1] = getCellAddress(0, sheet.colCount - 1).replace(/[0-9]/g, '') + colNames[1];
            range = colNames[0] + ':' + colNames[1];
        }
        return { range: range, isFullCol: isFullCol };
    };
    /**
     * Gets the module name.
     *
     * @returns {string} string
     */
    WorkbookDataValidation.prototype.getModuleName = function () {
        return 'workbookDataValidation';
    };
    return WorkbookDataValidation;
}());
export { WorkbookDataValidation };
